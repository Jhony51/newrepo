#include <bits/stdc++.h>
#define V 5
using namespace std;

// Function to find the vertex with the minimum distance value
int minDistance(int dist[], bool sptSet[])
{
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++)
    {
        if (!sptSet[v] && dist[v] <= min)
        {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

// Function to print the shortest path from the source
void printSolution(int dist[], int previous[])
{
    cout << "Vertex\t\tDistance from Source\tPrevious Vertex\n";
    for (int i = 0; i < V; i++)
    {
        cout << i << "\t\t" << dist[i] << "\t\t\t" << previous[i] << endl;
    }
}

// Dijkstra's algorithm implementation
void dijkstra(int graph[V][V], int src)
{
    int dist[V];     // Output array. dist[i] holds the shortest distance from src to i
    int previous[V]; // Array to store the previous vertex in the shortest path
    bool sptSet[V];  // sptSet[i] will be true if vertex i is included in the shortest path tree

    // Initialize all distances as infinite and sptSet as false
    for (int i = 0; i < V; i++)
    {
        dist[i] = INT_MAX;
        sptSet[i] = false;
        previous[i] = -1; // No previous vertex initially
    }

    // Distance from source to itself is always 0
    dist[src] = 0;

    // Main loop
    for (int count = 0; count < V - 1; count++)
    {
        // Pick the minimum distance vertex from the set of vertices not yet processed
        int u = minDistance(dist, sptSet);
        sptSet[u] = true; // Mark the picked vertex as processed

        // Update dist value of the adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++)
        {
            // Update dist[v] if and only if it is not in sptSet, there is an edge from u to v,
            // and the total weight of the path from src to v through u is smaller than the current value of dist[v]
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
            {
                dist[v] = dist[u] + graph[u][v];
                previous[v] = u; // Update previous vertex for path reconstruction
            }
        }
    }

    // Print the final shortest distance and path
    printSolution(dist, previous);
}

// Main function
int main()
{
    // Adjacency matrix representation of the graph
    int graph[V][V] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}};

    // Starting node is 0 (as per the example given)
    dijkstra(graph, 0);
    return 0;
}
