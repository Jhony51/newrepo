#include <bits/stdc++.h>
using namespace std;

// Function to heapify a subtree rooted at index i
void heapifyMax(int arr[], int n, int i)
{
    int largest = i;        // Initialize largest as root
    int lchild = 2 * i + 1; // Left child
    int rchild = 2 * i + 2; // Right child

    // If left child is larger than root
    if (lchild < n && arr[lchild] > arr[largest])
    {
        largest = lchild;
    }

    // If right child is larger than largest so far
    if (rchild < n && arr[rchild] > arr[largest])
    {
        largest = rchild;
    }

    // If largest is not root, swap and continue heapifying
    if (largest != i)
    {
        swap(arr[i], arr[largest]);
        heapifyMax(arr, n, largest);
    }
}

// Function to build a max heap
void createHeapMax(int arr[], int n)
{
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
    {
        heapifyMax(arr, n, i);
    }
}

// Heapify function for min heap
void heapifyMin(int arr[], int n, int i)
{
    int smallest = i;       // Initialize smallest as root
    int lchild = 2 * i + 1; // Left child
    int rchild = 2 * i + 2; // Right child

    // If left child is smaller than root
    if (lchild < n && arr[lchild] < arr[smallest])
    {
        smallest = lchild;
    }

    // If right child is smaller than smallest so far
    if (rchild < n && arr[rchild] < arr[smallest])
    {
        smallest = rchild;
    }

    // If smallest is not root, swap and continue heapifying
    if (smallest != i)
    {
        swap(arr[i], arr[smallest]);
        heapifyMin(arr, n, smallest);
    }
}

// Function to build a min heap
void createHeapMin(int arr[], int n)
{
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
    {
        heapifyMin(arr, n, i);
    }
}

// Function to perform heap sort using max heap
void heapSortMax(int arr[], int n)
{
    createHeapMax(arr, n); // Build max heap

    // One by one extract elements from heap
    for (int i = n - 1; i > 0; i--)
    {
        swap(arr[0], arr[i]);  // Move current root to end
        heapifyMax(arr, i, 0); // call max heapify on the reduced heap
    }
}

// Function to perform heap sort using min heap
void heapSortMin(int arr[], int n)
{
    createHeapMin(arr, n); // Build min heap

    // One by one extract elements from heap
    for (int i = n - 1; i > 0; i--)
    {
        swap(arr[0], arr[i]);  // Move current root to end
        heapifyMin(arr, i, 0); // call min heapify on the reduced heap
    }
}

// Function to display the array
void Display(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Main function
int main()
{
    bool go = true;
    int choice;
    int n;

    cout << "Enter the Size of Array: ";
    cin >> n;
    int arr[n];

    cout << "Enter The Elements of Array: " << endl;
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    cout << endl;
    while (go)
    {
        cout << "1] Perform Heap Sort using Max Heap\n"<< "2] Perform Heap Sort using Min Heap\n"<< "3] Exit" << endl;
        cin >> choice;

        switch (choice)
        {
        case 1:
            heapSortMax(arr, n);
            cout << "Sorted Array (Max Heap): ";
            Display(arr, n);
            break;
        case 2:
            heapSortMin(arr, n);
            cout << "Sorted Array (Min Heap): ";
            Display(arr, n);
            break;
        case 3:
            go = false;
            cout << "Thanks..." << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
            break;
        }
    }
    return 0;
}
