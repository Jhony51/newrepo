#include<iostream>
#include <bits/stdc++.h>
#include <queue>

using namespace std;

struct Node
{
    int data;
    Node *left, *right;
};

class BST
{
   
public:
    Node *root;

    void deleteTree(Node *t)
    {
        if (t)
        {
            deleteTree(t->left);
            deleteTree(t->right);
            delete t;
        }
    }

    BST() 
    {
        root=NULL;
    }

    ~BST()//destructor to clear memory after execution
    {
        deleteTree(root);
    }

    Node *getroot()
    {
        return root;
    }

    void insert()
    {
        Node *newNode = new Node();
        cout << "\nEnter data for new Node: ";
        cin >> newNode->data;
        newNode->left = newNode->right = NULL;

        if (root == NULL)
        {
            root = newNode;
        }
        else
        {
            Node *temp = root;
            Node *parent = nullptr;

            while (temp != NULL)
            {
                parent = temp;
                if (newNode->data < temp->data)
                {
                    temp = temp->left;
                }
                else
                {
                    temp = temp->right;
                }
            }

            if (newNode->data < parent->data)
            {
                parent->left = newNode;
            }
            else
            {
                parent->right = newNode;
            }
        }
        cout << "Data Added Successfully.";
    }

    void del(int x)
    {
        root = delete_Node(root, x);
    }

    Node *delete_Node(Node *t, int x)
    {
        if (t == NULL)
        {
            cout << "\nElement not found!";
            return t;
        }
        if (x < t->data)
        {
            t->left = delete_Node(t->left, x);
            return t;
        }
        else if (x > t->data)
        {
            t->right = delete_Node(t->right, x);
            return t;
        }
        else
        {
            Node *temp;
            if (t->left == NULL)
            {
                temp = t;
                t = t->right;
                delete temp;
                return t;
            }
            else if (t->right == NULL)
            {
                temp = t;
                t = t->left;
                delete temp;
                return t;
            }
            temp = t->right;
            while (temp->left != NULL)
                temp = temp->left;
            t->data = temp->data;
            t->right = delete_Node(t->right, temp->data);
            return t;
        }
    }

    void mirror_tree(Node *t)
    {
        if (t != NULL)
        {
            swap(t->left, t->right);
            mirror_tree(t->left);
            mirror_tree(t->right);
        }
    }

    void search(int no)
    {
        Node *temp = root;
        while (temp != nullptr)
        {
            if (no == temp->data)
            {
                cout << "\nData found!";
                return;
            }
            temp = (no < temp->data) ? temp->left : temp->right;
        }
        cout << "\nData doesn't exist.";
    }

    void display(Node *root)
    {
        if (root == NULL)
        {
            return;
        }
        display(root->left);
        cout << " " << root->data << " ";
        display(root->right);
    }

    void display_level()
    {
        queue<Node *> q;
        if (root == NULL)
        {
            return;
        }
        q.push(root);
        while (!q.empty())
        {
            Node *curr = q.front();
            q.pop();
            cout << curr->data << " ";
            if (curr->left)
            {
                q.push(curr->left);
            }
            if (curr->right)
            {
                q.push(curr->right);
            }
        }
    }

    int height_tree(Node *t)
    {
        if (t == NULL)
        {
            return 0;
        }
        int hlt = height_tree(t->left);
        int hrt = height_tree(t->right);
        return ((max(hlt, hrt)) + 1);
    }
};

int main()
{
    BST tree;
    int choice;
    while (true)
    {
        cout << "\n\nBinary Search Tree Operations ";
        cout << "\n1) Insert.";
        cout << "\n2) Delete.";
        cout << "\n3) Search.";
        cout << "\n4) Mirror Image.";
        cout << "\n5) Display.";
        cout << "\n6) Display Level-wise.";
        cout << "\n7) Height of the tree.";
        cout << "\n8) Exit.";
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
        {
            tree.insert();
            break;
        }
        case 2:
        {
            int deldata;
            cout << "\nEnter data to delete: ";
            cin >> deldata;
            tree.del(deldata);
            cout<<"DELETED SUCCESSFULLY.";
            break;
        }
        case 3:
        {
            int searchdata;
            cout << "\nEnter number to search: ";
            cin >> searchdata;
            tree.search(searchdata);
            break;
        }
        case 4:
        {
            cout << "\nMirror Image of tree: ";
            tree.mirror_tree(tree.getroot());
            tree.display(tree.getroot());
            tree.mirror_tree(tree.getroot());
            break;
        }
        case 5:
        {
            cout << "\nInorder traversal of tree: ";
            tree.display(tree.getroot());
            break;
        }
        case 6:
        {
            cout << "\nLevel-Order traversal of tree: ";
            tree.display_level();
            break;
        }
        case 7:
        {
            cout << "\nHeight of the tree: " << tree.height_tree(tree.getroot());
            break;
        }
        case 8:
            return 0;
        default:
            cout << "\nInvalid choice.";
        }
    }
}
